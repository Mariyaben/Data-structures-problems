#include<iostream>
#include<exception>
using namespace std;

class Node
{
    int data;
    Node* ptr;
    public:
        void set_Data(int d){
            data = d;
        }
        void set_link(Node* N){
            ptr = N;
        }
        int info(){
            return data;
        }
        Node* link(){
            return ptr;
        }
};

class Linked_list
{
    Node* Start = 0;
    public:
        Linked_list(){}
        Linked_list(Linked_list &L)
        {
            Start = L.Start;
        }
        void set_start(Node &N){
            Start = &N;
        }
        void input_list(Node*,int);
        void traverse(void);
        int num_elements(void);
        void unsorted_search(int item);
        void sorted_search(int item);
        void insert(int ITEM,Node* LOC);
        Node* find(int ITEM); 
        void insert(int ITEM);
        friend Node* Merge(Linked_list L1, Linked_list L2);
        int remove(Node* LOC,Node* LOCP);
        void find_del(int ITEM,Node* &LOC,Node* &LOCP);
        void remove(int ITEM);
};

void Linked_list::input_list(Node* Nptr,int num){

    cout << "Enter "<< num << " elements : " ;
    int el;
    for(int i = 0 ; i < num ; i++){
        cin >> el ;

        Node* new_Node = new Node; 
      
        (*Nptr).set_Data(el);
        (*Nptr).set_link(new_Node);

        Nptr = new_Node;
    }
}

void Linked_list::traverse(void)
{
    Node* Nptr = this->Start;
    while ((*Nptr).link() != 0)
    {
        cout << (*Nptr).info() << "," ;
        Nptr = (*Nptr).link();
    }
    cout << "\n";
}

void Linked_list::insert(int ITEM,Node* LOC)
{
    
    try{
        Node *NEW = new Node;
        if (NEW==NULL)
        {
            throw std::bad_alloc();
        }
        if (Start == 0){
            Start = NEW;
            NEW->set_link(0);
        }
        NEW->set_Data(ITEM);
        if (LOC == 0){
            NEW->set_link(Start) ;
            Start = NEW ;
        }
        else 
        {
            NEW->set_link(LOC->link()) ;
            LOC->set_link(NEW);
        }
    }
    catch(const std::exception& e)
    {
        std::cerr << e.what() << '\n';
    }
}

Node* Linked_list::find(int ITEM){
   
    if (Start == 0){
        return 0;
    }
    if (ITEM < Start->info()){
        return 0;
    }
    
    Node* SAVE = Start;
    Node* PTR = Start->link();
    while (PTR->link() != 0){
        if (ITEM < PTR->info()){
            return SAVE ;
        }
        else{
            SAVE = PTR ;
            PTR = PTR->link();
        }
    }
    return SAVE ;
}

void Linked_list::insert(int ITEM){
    Node* LOC = this->find(ITEM);
    this->insert(ITEM,LOC);
}

int Linked_list::remove(Node* LOC,Node* LOCP)
{
    if (Start == 0)
    {
        return 0;
    }
    if (LOCP == 0)
    {
        Start = Start->link();
        LOC->set_link(0);
        int d = LOC->info();
        delete LOC;
        return d;
    }
    else
    {
        LOCP->set_link(LOC->link());
        int ret = LOC->info();
        LOC->set_link(0);
        delete LOC;
        return ret;
    }
}

void Linked_list::find_del(int ITEM,Node* &LOC,Node* &LOCP)
{
    if (Start == 0)
    {
        LOC = 0;
        LOCP = 0;
        return;
    }
    if (Start->info() == ITEM)
    {
        LOCP = 0;
        LOC = Start;
        return;
    }
    else
    {
        Node* SAVE = Start;
        Node* PTR = Start->link();
        while(PTR->link() != 0)
        {
            if (PTR->info()==ITEM)
            {
                LOC = PTR;
                LOCP = SAVE;
                return;
            }
            else
            {
                SAVE = PTR;
                PTR = PTR->link();
            }
        }
    }
    LOC = 0;
    LOCP = 0;
    return;
}

void Linked_list::remove(int ITEM)
{
    Node* LOC1;
    Node* LOCP1;
    this->find_del(ITEM,LOC1,LOCP1);
    if (LOC1 == 0)
    {
        cout << "Element does not exist\n";
    }
    else
    {
        this->remove(LOC1,LOCP1);
        cout << "Deleted Successfully\n";
    }
}


Node* Merge(Linked_list L1, Linked_list L2)
{
    Linked_list L_ret;
    Node* ptr1 = L1.Start;
    Node* ptr2 = L2.Start;
    Node *ptr3,*Save;
    ptr3 = new Node();

    Node* NextNode = new Node();
    Save = NextNode;
    L_ret.set_start(*ptr3);
   
    while(ptr1->link()!= 0 && ptr2->link() != 0){
       
        if (ptr1->info() > ptr2->info()){
            ptr3->set_link(Save);
            ptr3->set_Data(ptr2->info());
            cout << "C1 : " << ptr1->info() << " " << ptr2->info() << endl;
            cout << "L : " << ptr3 ->info();
            ptr2 = ptr2->link(); 
        }
        else{
            ptr3->set_link(Save);
            ptr3->set_Data(ptr1->info());
            cout << "C2 : " << ptr1->info() << " " << ptr2->info() << endl;
            cout << "L : " << ptr3 ->info();
            ptr1 = ptr1->link();
        }
        Node* NextNode = new Node;
        Save = NextNode;
    }
    if (ptr1==0)
    {
        while (ptr2!=0)
        {
            Node* NextNode = new Node;
            ptr3->set_link(Save);
            ptr3->set_Data(ptr2->info());
            ptr2 = ptr2->link();
        }
    }
    else
    {
        while (ptr1!=0)
        {
            Node* NextNode = new Node;
            ptr3->set_link(Save);
            ptr3->set_Data(ptr1->info());
            ptr1 = ptr1->link();
        }
    }
    return ptr3;
}

int main()
{
   
            Linked_list L3,L4;
            int len3,len4;
            cout << "Enter number of elements in both : ";
            cin >> len3 >> len4 ;
            Node* Nptr1 = new Node();  
            Node* Nptr2 = new Node();
            L3.set_start(*Nptr1);
            L4.set_start(*Nptr2);
            int el;
            cout << "Enter " << len3 << " elements : " ;
            for(int i = 0 ; i < len3 ; i++){
                cin >> el ;
                Node* new_Node = new Node; 
                (*Nptr1).set_Data(el);
                (*Nptr1).set_link(new_Node);
                Nptr1 = new_Node;
            }
            Nptr1->set_link(0);
            cout << "Enter " << len4 << " elements : ";
            for(int i = 0 ; i < len4 ; i++){
                cin >> el ;
                Node* new_Node = new Node; 
                (*Nptr2).set_Data(el);
                (*Nptr2).set_link(new_Node);
                Nptr2 = new_Node;
            }
            Nptr2->set_link(0);
            Node* L = Merge(L3,L4);
            Linked_list L5;
            L5.set_start(*L);
            cout << "INPUTS : \n" ;
            cout << "L1 : ";
            L3.traverse();
            cout << "L2 : ";
            L4.traverse();
            cout << "Merged : ";
            L5.traverse();
        //}
    //}
    return 0;
}
